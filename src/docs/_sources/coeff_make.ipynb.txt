{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# coeff_make"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 概要"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "この関数では本パッケージ内の関数「mat_make」でもちいる引数を作成する"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "この関数は入力するvecのlengthによって変化する方程式を解いている\\\n",
    "例えばlengthが8の場合は以下のような方程式を解いている\n",
    "ここでは$a_i$が入力値であり、$\\alpha_i$が出力値である\n",
    "$$\n",
    "\\begin{aligned} \n",
    "\n",
    "&\\alpha_1\\sum_{n=0}^{7}{}a_{0n}^2 \n",
    "- \\alpha_1^{-1}\\sum_{n=8}^{15}{}a_{0n}^2 = 0\\\\ \n",
    "&\\alpha_2\\sum_{n=0}^{3}{}a_{0n}^2 - \\alpha_2^{-1}\\sum_{n=4}^{7}{}a_{0n}^2 +\\alpha_3 \\sum_{n=8}^{11}{}a_{0n}^2 \n",
    "- \\alpha_3^{-1}\\sum_{n=12}^{15}{}a_{0n}^2 = 0\\\\ \n",
    "&\\alpha_1\\alpha_2\\sum_{n=0}^{3}{}a_{0n}^2 \n",
    "- \\alpha_1\\alpha_2^{-1}\\sum_{n=4}^{7}{}a_{0n}^2 +\n",
    "\\alpha_1^{-1}\\alpha_3 \\sum_{n=8}^{11}{}a_{0n}^2 \n",
    "- \\alpha_1^{-1}\\alpha_3^{-1}\\sum_{n=12}^{15}{}a_{0n}^2 = 0\\\\\n",
    "&\\sum_{n=0}^3\\Biggl(\\alpha_{n+4}\\sum_{l=4n}^{4n+1}a_{02l}^2+\\alpha_{n+4}^{-1}\\sum_{l=4n+2}^{4n+3}a_{02l}^2\\Biggr) = 0\\\\\n",
    "&\\alpha_1\\sum_{n=0}^1\\Biggl(\\alpha_{n+4}\\sum_{l=4n}^{4n+1}a_{02l}^2+\\alpha_{n+4}^{-1}\\sum_{l=4n+2}^{4n+3}a_{02l}^2\\Biggr) + \\alpha_1^{-1}\\sum_{n=2}^3\\Biggl(\\alpha_{n+4}\\sum_{l=4n}^{4n+1}a_{02l}^2+\\alpha_{n+4}^{-1}\\sum_{l=4n+2}^{4n+3}a_{02l}^2\\Biggr) = 0\\\\\n",
    "&\\sum_{n=0}^1\\alpha_{n+1}\\Biggl(\\alpha_{2n+4}\\sum_{l=0}^{1}a_{0(8n+l)}^2+\\alpha_{2n+4}^{-1}\\sum_{l=0}^{1}a_{{02(8n+l+2)}}^2\\Biggr) + \\sum_{n=0}^1\\alpha_{n+1}^{-1}\\Biggl(\\alpha_{2n+5}\\sum_{l=0}^{1}a_{0(8n+l+5)}^2+\\alpha_{2n+2}^{-1}\\sum_{l=0}^{1}a_{{02(8n+l+6)}}^2\\Biggr) = 0\\\\\n",
    "&\\sum_{n=0}^1\\alpha_{1}^{(-1)^n}\\alpha_{n+1}\\Biggl(\\alpha_{2n+4}\\sum_{l=0}^{1}a_{0(8n+l)}^2+\\alpha_{2n+4}^{-1}\\sum_{l=0}^{1}a_{{02(8n+l+2)}}^2\\Biggr) \n",
    "+ \\sum_{n=0}^1\\alpha_{1}^{(-1)^n}\\alpha_{n+1}^{-1}\\Biggl(\\alpha_{2n+5}\\sum_{l=0}^{1}a_{0(8n+l+5)}^2+\\alpha_{2n+2}^{-1}\\sum_{l=0}^{1}a_{{02(8n+l+6)}}^2\\Biggr) = 0\\\\\n",
    "\n",
    "\\end{aligned}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 引数一覧"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "|argument name|type|role|\n",
    "|---|---|---|\n",
    "|vec|list(elements:float)|線型結合で表現したときの係数を規格化したlist|"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 戻り値"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "coeff_list"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Python code"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "def coeff_make(vec):\n",
    "    coeff_list = []\n",
    "    cal_list = []\n",
    "    if len(vec) == 2:\n",
    "        print(\"You do not need to calculate coefficients!!\")\n",
    "        return [vec[1], vec[0]]\n",
    "    else:\n",
    "        for i in range(int(np.log2(len(vec))) - 1):\n",
    "            pre_list = []\n",
    "            sep_num = 2**(i+1)\n",
    "            elelen = len(vec)\n",
    "            for j in range(sep_num):\n",
    "                sum_list = vec[elelen//sep_num*j: \n",
    "                               (elelen//sep_num*(j+1))]\n",
    "                sum_pow = np.sum(np.array(sum_list)**2)\n",
    "                if sum_pow == 0:\n",
    "                    pre_list.append(1)\n",
    "                else:\n",
    "                    pre_list.append(sum_pow)\n",
    "            cal_list.append(pre_list)\n",
    "        for i in range(len(cal_list)):\n",
    "            save_list = []\n",
    "            for j in range(len(cal_list[i])//2):\n",
    "                save_list.append(np.sqrt(cal_list[i]\\\n",
    "                                [2*j]/cal_list[i][2*j+1]))\n",
    "            coeff_list.append(save_list)\n",
    "        return coeff_list\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 実行例"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
